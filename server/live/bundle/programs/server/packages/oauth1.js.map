{"version":3,"sources":["meteor://ðŸ’»app/packages/oauth1/packages/oauth1.js"],"names":[],"mappingsoH","file":"/packages/oauth1.js","sourcesContent":["(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                     //\n// packages/oauth1/oauth1_binding.js                                                                   //\n//                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                       //\nvar crypto = Npm.require(\"crypto\");                                                                    // 1\nvar querystring = Npm.require(\"querystring\");                                                          // 2\nvar urlModule = Npm.require(\"url\");                                                                    // 3\n                                                                                                       // 4\n// An OAuth1 wrapper around http calls which helps get tokens and                                      // 5\n// takes care of HTTP headers                                                                          // 6\n//                                                                                                     // 7\n// @param config {Object}                                                                              // 8\n//   - consumerKey (String): oauth consumer key                                                        // 9\n//   - secret (String): oauth consumer secret                                                          // 10\n// @param urls {Object}                                                                                // 11\n//   - requestToken (String): url                                                                      // 12\n//   - authorize (String): url                                                                         // 13\n//   - accessToken (String): url                                                                       // 14\n//   - authenticate (String): url                                                                      // 15\nOAuth1Binding = function(config, urls) {                                                               // 16\n  this._config = config;                                                                               // 17\n  this._urls = urls;                                                                                   // 18\n};                                                                                                     // 19\n                                                                                                       // 20\nOAuth1Binding.prototype.prepareRequestToken = function(callbackUrl) {                                  // 21\n  var self = this;                                                                                     // 22\n                                                                                                       // 23\n  var headers = self._buildHeader({                                                                    // 24\n    oauth_callback: callbackUrl                                                                        // 25\n  });                                                                                                  // 26\n                                                                                                       // 27\n  var response = self._call('POST', self._urls.requestToken, headers);                                 // 28\n  var tokens = querystring.parse(response.content);                                                    // 29\n                                                                                                       // 30\n  if (! tokens.oauth_callback_confirmed)                                                               // 31\n    throw _.extend(new Error(\"oauth_callback_confirmed false when requesting oauth1 token\"),           // 32\n                             {response: response});                                                    // 33\n                                                                                                       // 34\n  self.requestToken = tokens.oauth_token;                                                              // 35\n  self.requestTokenSecret = tokens.oauth_token_secret;                                                 // 36\n};                                                                                                     // 37\n                                                                                                       // 38\nOAuth1Binding.prototype.prepareAccessToken = function(query, requestTokenSecret) {                     // 39\n  var self = this;                                                                                     // 40\n                                                                                                       // 41\n  // support implementations that use request token secrets. This is                                   // 42\n  // read by self._call.                                                                               // 43\n  //                                                                                                   // 44\n  // XXX make it a param to call, not something stashed on self? It's                                  // 45\n  // kinda confusing right now, everything except this is passed as                                    // 46\n  // arguments, but this is stored.                                                                    // 47\n  if (requestTokenSecret)                                                                              // 48\n    self.accessTokenSecret = requestTokenSecret;                                                       // 49\n                                                                                                       // 50\n  var headers = self._buildHeader({                                                                    // 51\n    oauth_token: query.oauth_token,                                                                    // 52\n    oauth_verifier: query.oauth_verifier                                                               // 53\n  });                                                                                                  // 54\n                                                                                                       // 55\n  var response = self._call('POST', self._urls.accessToken, headers);                                  // 56\n  var tokens = querystring.parse(response.content);                                                    // 57\n                                                                                                       // 58\n  if (! tokens.oauth_token || ! tokens.oauth_token_secret) {                                           // 59\n    var error = new Error(\"missing oauth token or secret\");                                            // 60\n    // We provide response only if no token is available, we do not want to leak any tokens            // 61\n    if (! tokens.oauth_token && ! tokens.oauth_token_secret) {                                         // 62\n      _.extend(error, {response: response});                                                           // 63\n    }                                                                                                  // 64\n    throw error;                                                                                       // 65\n  }                                                                                                    // 66\n                                                                                                       // 67\n  self.accessToken = tokens.oauth_token;                                                               // 68\n  self.accessTokenSecret = tokens.oauth_token_secret;                                                  // 69\n};                                                                                                     // 70\n                                                                                                       // 71\nOAuth1Binding.prototype.call = function(method, url, params, callback) {                               // 72\n  var self = this;                                                                                     // 73\n                                                                                                       // 74\n  var headers = self._buildHeader({                                                                    // 75\n    oauth_token: self.accessToken                                                                      // 76\n  });                                                                                                  // 77\n                                                                                                       // 78\n  if(! params) {                                                                                       // 79\n    params = {};                                                                                       // 80\n  }                                                                                                    // 81\n                                                                                                       // 82\n  return self._call(method, url, headers, params, callback);                                           // 83\n};                                                                                                     // 84\n                                                                                                       // 85\nOAuth1Binding.prototype.get = function(url, params, callback) {                                        // 86\n  return this.call('GET', url, params, callback);                                                      // 87\n};                                                                                                     // 88\n                                                                                                       // 89\nOAuth1Binding.prototype.post = function(url, params, callback) {                                       // 90\n  return this.call('POST', url, params, callback);                                                     // 91\n};                                                                                                     // 92\n                                                                                                       // 93\nOAuth1Binding.prototype._buildHeader = function(headers) {                                             // 94\n  var self = this;                                                                                     // 95\n  return _.extend({                                                                                    // 96\n    oauth_consumer_key: self._config.consumerKey,                                                      // 97\n    oauth_nonce: Random.secret().replace(/\\W/g, ''),                                                   // 98\n    oauth_signature_method: 'HMAC-SHA1',                                                               // 99\n    oauth_timestamp: (new Date().valueOf()/1000).toFixed().toString(),                                 // 100\n    oauth_version: '1.0'                                                                               // 101\n  }, headers);                                                                                         // 102\n};                                                                                                     // 103\n                                                                                                       // 104\nOAuth1Binding.prototype._getSignature = function(method, url, rawHeaders, accessTokenSecret, params) {\n  var self = this;                                                                                     // 106\n  var headers = self._encodeHeader(_.extend({}, rawHeaders, params));                                  // 107\n                                                                                                       // 108\n  var parameters = _.map(headers, function(val, key) {                                                 // 109\n    return key + '=' + val;                                                                            // 110\n  }).sort().join('&');                                                                                 // 111\n                                                                                                       // 112\n  var signatureBase = [                                                                                // 113\n    method,                                                                                            // 114\n    self._encodeString(url),                                                                           // 115\n    self._encodeString(parameters)                                                                     // 116\n  ].join('&');                                                                                         // 117\n                                                                                                       // 118\n  var secret = OAuth.openSecret(self._config.secret);                                                  // 119\n                                                                                                       // 120\n  var signingKey = self._encodeString(secret) + '&';                                                   // 121\n  if (accessTokenSecret)                                                                               // 122\n    signingKey += self._encodeString(accessTokenSecret);                                               // 123\n                                                                                                       // 124\n  return crypto.createHmac('SHA1', signingKey).update(signatureBase).digest('base64');                 // 125\n};                                                                                                     // 126\n                                                                                                       // 127\nOAuth1Binding.prototype._call = function(method, url, headers, params, callback) {                     // 128\n  var self = this;                                                                                     // 129\n                                                                                                       // 130\n  // all URLs to be functions to support parameters/customization                                      // 131\n  if(typeof url === \"function\") {                                                                      // 132\n    url = url(self);                                                                                   // 133\n  }                                                                                                    // 134\n                                                                                                       // 135\n  headers = headers || {};                                                                             // 136\n  params = params || {};                                                                               // 137\n                                                                                                       // 138\n  // Extract all query string parameters from the provided URL                                         // 139\n  var parsedUrl = urlModule.parse(url, true);                                                          // 140\n  // Merge them in a way that params given to the method call have precedence                          // 141\n  params = _.extend({}, parsedUrl.query, params);                                                      // 142\n                                                                                                       // 143\n  // Reconstruct the URL back without any query string parameters                                      // 144\n  // (they are now in params)                                                                          // 145\n  parsedUrl.query = {};                                                                                // 146\n  parsedUrl.search = '';                                                                               // 147\n  url = urlModule.format(parsedUrl);                                                                   // 148\n                                                                                                       // 149\n  // Get the signature                                                                                 // 150\n  headers.oauth_signature =                                                                            // 151\n    self._getSignature(method, url, headers, self.accessTokenSecret, params);                          // 152\n                                                                                                       // 153\n  // Make a authorization string according to oauth1 spec                                              // 154\n  var authString = self._getAuthHeaderString(headers);                                                 // 155\n                                                                                                       // 156\n  // Make signed request                                                                               // 157\n  try {                                                                                                // 158\n    var response = HTTP.call(method, url, {                                                            // 159\n      params: params,                                                                                  // 160\n      headers: {                                                                                       // 161\n        Authorization: authString                                                                      // 162\n      }                                                                                                // 163\n    }, callback && function (error, response) {                                                        // 164\n      if (! error) {                                                                                   // 165\n        response.nonce = headers.oauth_nonce;                                                          // 166\n      }                                                                                                // 167\n      callback(error, response);                                                                       // 168\n    });                                                                                                // 169\n    // We store nonce so that JWTs can be validated                                                    // 170\n    if (response)                                                                                      // 171\n      response.nonce = headers.oauth_nonce;                                                            // 172\n    return response;                                                                                   // 173\n  } catch (err) {                                                                                      // 174\n    throw _.extend(new Error(\"Failed to send OAuth1 request to \" + url + \". \" + err.message),          // 175\n                   {response: err.response});                                                          // 176\n  }                                                                                                    // 177\n};                                                                                                     // 178\n                                                                                                       // 179\nOAuth1Binding.prototype._encodeHeader = function(header) {                                             // 180\n  var self = this;                                                                                     // 181\n  return _.reduce(header, function(memo, val, key) {                                                   // 182\n    memo[self._encodeString(key)] = self._encodeString(val);                                           // 183\n    return memo;                                                                                       // 184\n  }, {});                                                                                              // 185\n};                                                                                                     // 186\n                                                                                                       // 187\nOAuth1Binding.prototype._encodeString = function(str) {                                                // 188\n  return encodeURIComponent(str).replace(/[!'()]/g, escape).replace(/\\*/g, \"%2A\");                     // 189\n};                                                                                                     // 190\n                                                                                                       // 191\nOAuth1Binding.prototype._getAuthHeaderString = function(headers) {                                     // 192\n  var self = this;                                                                                     // 193\n  return 'OAuth ' +  _.map(headers, function(val, key) {                                               // 194\n    return self._encodeString(key) + '=\"' + self._encodeString(val) + '\"';                             // 195\n  }).sort().join(', ');                                                                                // 196\n};                                                                                                     // 197\n                                                                                                       // 198\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                     //\n// packages/oauth1/oauth1_server.js                                                                    //\n//                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                       //\nvar url = Npm.require(\"url\");                                                                          // 1\n                                                                                                       // 2\n// connect middleware                                                                                  // 3\nOAuth._requestHandlers['1'] = function (service, query, res) {                                         // 4\n  var config = ServiceConfiguration.configurations.findOne({service: service.serviceName});            // 5\n  if (! config) {                                                                                      // 6\n    throw new ServiceConfiguration.ConfigError(service.serviceName);                                   // 7\n  }                                                                                                    // 8\n                                                                                                       // 9\n  var urls = service.urls;                                                                             // 10\n  var oauthBinding = new OAuth1Binding(config, urls);                                                  // 11\n                                                                                                       // 12\n  var credentialSecret;                                                                                // 13\n                                                                                                       // 14\n  if (query.requestTokenAndRedirect) {                                                                 // 15\n    // step 1 - get and store a request token                                                          // 16\n    var callbackUrl = OAuth._redirectUri(service.serviceName, config, {                                // 17\n      state: query.state,                                                                              // 18\n      cordova: (query.cordova === \"true\"),                                                             // 19\n      android: (query.android === \"true\")                                                              // 20\n    });                                                                                                // 21\n                                                                                                       // 22\n    // Get a request token to start auth process                                                       // 23\n    oauthBinding.prepareRequestToken(callbackUrl);                                                     // 24\n                                                                                                       // 25\n    // Keep track of request token so we can verify it on the next step                                // 26\n    OAuth._storeRequestToken(                                                                          // 27\n      OAuth._credentialTokenFromQuery(query),                                                          // 28\n      oauthBinding.requestToken,                                                                       // 29\n      oauthBinding.requestTokenSecret);                                                                // 30\n                                                                                                       // 31\n    // support for scope/name parameters                                                               // 32\n    var redirectUrl = undefined;                                                                       // 33\n    if(typeof urls.authenticate === \"function\") {                                                      // 34\n      redirectUrl = urls.authenticate(oauthBinding, {                                                  // 35\n        query: query                                                                                   // 36\n      });                                                                                              // 37\n    } else {                                                                                           // 38\n      // Parse the URL to support additional query parameters in urls.authenticate                     // 39\n      var redirectUrlObj = url.parse(urls.authenticate, true);                                         // 40\n      redirectUrlObj.query = redirectUrlObj.query || {};                                               // 41\n      redirectUrlObj.query.oauth_token = oauthBinding.requestToken;                                    // 42\n      redirectUrlObj.search = '';                                                                      // 43\n      // Reconstruct the URL back with provided query parameters merged with oauth_token               // 44\n      redirectUrl = url.format(redirectUrlObj);                                                        // 45\n    }                                                                                                  // 46\n                                                                                                       // 47\n    // redirect to provider login, which will redirect back to \"step 2\" below                          // 48\n                                                                                                       // 49\n    res.writeHead(302, {'Location': redirectUrl});                                                     // 50\n    res.end();                                                                                         // 51\n  } else {                                                                                             // 52\n    // step 2, redirected from provider login - store the result                                       // 53\n    // and close the window to allow the login handler to proceed                                      // 54\n                                                                                                       // 55\n    // Get the user's request token so we can verify it and clear it                                   // 56\n    var requestTokenInfo = OAuth._retrieveRequestToken(                                                // 57\n      OAuth._credentialTokenFromQuery(query));                                                         // 58\n                                                                                                       // 59\n    if (! requestTokenInfo) {                                                                          // 60\n      throw new Error(\"Unable to retrieve request token\");                                             // 61\n    }                                                                                                  // 62\n                                                                                                       // 63\n    // Verify user authorized access and the oauth_token matches                                       // 64\n    // the requestToken from previous step                                                             // 65\n    if (query.oauth_token && query.oauth_token === requestTokenInfo.requestToken) {                    // 66\n                                                                                                       // 67\n      // Prepare the login results before returning.  This way the                                     // 68\n      // subsequent call to the `login` method will be immediate.                                      // 69\n                                                                                                       // 70\n      // Get the access token for signing requests                                                     // 71\n      oauthBinding.prepareAccessToken(query, requestTokenInfo.requestTokenSecret);                     // 72\n                                                                                                       // 73\n      // Run service-specific handler.                                                                 // 74\n      var oauthResult = service.handleOauthRequest(                                                    // 75\n        oauthBinding, { query: query });                                                               // 76\n                                                                                                       // 77\n      var credentialToken = OAuth._credentialTokenFromQuery(query);                                    // 78\n      credentialSecret = Random.secret();                                                              // 79\n                                                                                                       // 80\n      // Store the login result so it can be retrieved in another                                      // 81\n      // browser tab by the result handler                                                             // 82\n      OAuth._storePendingCredential(credentialToken, {                                                 // 83\n        serviceName: service.serviceName,                                                              // 84\n        serviceData: oauthResult.serviceData,                                                          // 85\n        options: oauthResult.options                                                                   // 86\n      }, credentialSecret);                                                                            // 87\n    }                                                                                                  // 88\n                                                                                                       // 89\n    // Either close the window, redirect, or render nothing                                            // 90\n    // if all else fails                                                                               // 91\n    OAuth._renderOauthResults(res, query, credentialSecret);                                           // 92\n  }                                                                                                    // 93\n};                                                                                                     // 94\n                                                                                                       // 95\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                     //\n// packages/oauth1/oauth1_pending_request_tokens.js                                                    //\n//                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                       //\n//                                                                                                     // 1\n// _pendingRequestTokens are request tokens that have been received                                    // 2\n// but not yet fully authorized (processed).                                                           // 3\n//                                                                                                     // 4\n// During the oauth1 authorization process, the Meteor App opens                                       // 5\n// a pop-up, requests a request token from the oauth1 service, and                                     // 6\n// redirects the browser to the oauth1 service for the user                                            // 7\n// to grant authorization.  The user is then returned to the                                           // 8\n// Meteor Apps' callback url and the request token is verified.                                        // 9\n//                                                                                                     // 10\n// When Meteor Apps run on multiple servers, it's possible that                                        // 11\n// 2 different servers may be used to generate the request token                                       // 12\n// and to verify it in the callback once the user has authorized.                                      // 13\n//                                                                                                     // 14\n// For this reason, the _pendingRequestTokens are stored in the database                               // 15\n// so they can be shared across Meteor App servers.                                                    // 16\n//                                                                                                     // 17\n// XXX This code is fairly similar to oauth/pending_credentials.js --                                  // 18\n// maybe we can combine them somehow.                                                                  // 19\n                                                                                                       // 20\n// Collection containing pending request tokens                                                        // 21\n// Has key, requestToken, requestTokenSecret, and createdAt fields.                                    // 22\nOAuth._pendingRequestTokens = new Mongo.Collection(                                                    // 23\n  \"meteor_oauth_pendingRequestTokens\", {                                                               // 24\n    _preventAutopublish: true                                                                          // 25\n  });                                                                                                  // 26\n                                                                                                       // 27\nOAuth._pendingRequestTokens._ensureIndex('key', {unique: 1});                                          // 28\nOAuth._pendingRequestTokens._ensureIndex('createdAt');                                                 // 29\n                                                                                                       // 30\n                                                                                                       // 31\n                                                                                                       // 32\n// Periodically clear old entries that never got completed                                             // 33\nvar _cleanStaleResults = function() {                                                                  // 34\n  // Remove request tokens older than 5 minute                                                         // 35\n  var timeCutoff = new Date();                                                                         // 36\n  timeCutoff.setMinutes(timeCutoff.getMinutes() - 5);                                                  // 37\n  OAuth._pendingRequestTokens.remove({ createdAt: { $lt: timeCutoff } });                              // 38\n};                                                                                                     // 39\nvar _cleanupHandle = Meteor.setInterval(_cleanStaleResults, 60 * 1000);                                // 40\n                                                                                                       // 41\n                                                                                                       // 42\n// Stores the key and request token in the _pendingRequestTokens collection.                           // 43\n// Will throw an exception if `key` is not a string.                                                   // 44\n//                                                                                                     // 45\n// @param key {string}                                                                                 // 46\n// @param requestToken {string}                                                                        // 47\n// @param requestTokenSecret {string}                                                                  // 48\n//                                                                                                     // 49\nOAuth._storeRequestToken = function (key, requestToken, requestTokenSecret) {                          // 50\n  check(key, String);                                                                                  // 51\n                                                                                                       // 52\n  // We do an upsert here instead of an insert in case the user happens                                // 53\n  // to somehow send the same `state` parameter twice during an OAuth                                  // 54\n  // login; we don't want a duplicate key error.                                                       // 55\n  OAuth._pendingRequestTokens.upsert({                                                                 // 56\n    key: key                                                                                           // 57\n  }, {                                                                                                 // 58\n    key: key,                                                                                          // 59\n    requestToken: OAuth.sealSecret(requestToken),                                                      // 60\n    requestTokenSecret: OAuth.sealSecret(requestTokenSecret),                                          // 61\n    createdAt: new Date()                                                                              // 62\n  });                                                                                                  // 63\n};                                                                                                     // 64\n                                                                                                       // 65\n                                                                                                       // 66\n// Retrieves and removes a request token from the _pendingRequestTokens collection                     // 67\n// Returns an object containing requestToken and requestTokenSecret properties                         // 68\n//                                                                                                     // 69\n// @param key {string}                                                                                 // 70\n//                                                                                                     // 71\nOAuth._retrieveRequestToken = function (key) {                                                         // 72\n  check(key, String);                                                                                  // 73\n                                                                                                       // 74\n  var pendingRequestToken = OAuth._pendingRequestTokens.findOne({ key: key });                         // 75\n  if (pendingRequestToken) {                                                                           // 76\n    OAuth._pendingRequestTokens.remove({ _id: pendingRequestToken._id });                              // 77\n    return {                                                                                           // 78\n      requestToken: OAuth.openSecret(pendingRequestToken.requestToken),                                // 79\n      requestTokenSecret: OAuth.openSecret(                                                            // 80\n        pendingRequestToken.requestTokenSecret)                                                        // 81\n    };                                                                                                 // 82\n  } else {                                                                                             // 83\n    return undefined;                                                                                  // 84\n  }                                                                                                    // 85\n};                                                                                                     // 86\n                                                                                                       // 87\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}