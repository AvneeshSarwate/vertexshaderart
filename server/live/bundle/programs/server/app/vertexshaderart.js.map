{"version":3,"sources":["meteor://ðŸ’»app/vertexshaderart.js"],"names":[],"mappings":"yfile":"/vertexshaderart.js","sourcesContent":["Art = new Mongo.Collection(\"art\");\n\n//FS.debug = true;\nImages = new FS.Collection(\"images\", {\n  stores: [\n    new FS.Store.FileSystem(\"images\", {\n      path: IMAGE_PATH,\n      beforeWrite: function(fileObj) {\n        fileObj.name(\"thumbnail.png\");\n        return {\n          extension: 'png',\n          type: 'image/png',\n        };\n      },\n    }),\n  ],\n});\n\n\nif (Meteor.isServer) {\n  Images.allow({\n    'insert': function() {\n        // add custom authentication code here\n        return true;\n    },\n    'download': function() {\n         return true;\n    },\n  });\n\n  Meteor.publish(\"art\", function () {\n    return Art.find({});\n  });\n\n  Meteor.publish(\"images\", function () {\n    return Images.find({});\n  });\n\n  var templateRE = /<template\\s+name=\"(.*?)\">([\\s\\S]*?)<\\/template>/g;\n  var ssrTemplates = Assets.getText('ssr-templates.html');\n  do {\n    var m = templateRE.exec(ssrTemplates);\n    if (m) {\n      SSR.compileTemplate(m[1], m[2]);\n    }\n  } while (m);\n\n  var urlRE = /(.*?\\:)\\/\\/(.*)$/;\n  function parseUrl(url) {\n    var u = {};\n    var hashNdx = url.indexOf(\"#\");\n    if (hashNdx >= 0) {\n      u.hash = url.substr(hashNdx);\n      url = url.substr(0, hashNdx);\n    }\n    var searchNdx = url.indexOf(\"?\");\n    if (searchNdx >= 0) {\n      u.search = url.substr(searchNdx);\n      url = url.substr(0, searchNdx);\n    }\n    var m = urlRE.exec(url);\n    if (m) {\n      u.protocol = m[1];\n      url = m[2];\n    }\n    var slashNdx = url.indexOf(\"/\");\n    if (slashNdx >= 0) {\n      u.hostname = url.substr(0, slashNdx);\n      u.pathname = url.substr(slashNdx);\n    } else {\n      u.host = other;\n    }\n\n    return u;\n  }\n\n  //var artPathRE = /\\/art\\/(.*)/;\n  //WebApp.connectHandlers.use(\"/\", function(req, res, next) {\n  //   var url = parseUrl(req.url);\n  //   if (url.pathname) {\n  //     var m = artPathRE.exec(url.pathname);\n  //     if (m) {\n  //\n  //     }\n  //   }\n  //   next();\n  //});\n\n//  Inject.meta(\"foo\", \"bar\");\n}\n\nif (Meteor.isClient) {\n  Meteor.subscribe(\"art\");\n  Meteor.subscribe(\"images\");\n\n  Template.gallery.helpers({\n    art: function () {\n      if (Session.get(\"hideCompleted\")) {\n        // If hide completed is checked, filter tasks\n        return Art.find({checked: {$ne: true}}, {sort: {createdAt: -1}});\n      } else {\n        // Otherwise, return all of the tasks\n        return Art.find({}, {sort: {createdAt: -1}});\n      }\n    },\n    numImages: function() {\n      return Images.find().count();\n    },\n    images: function() {\n      return Images.find();\n    },\n    hideCompleted: function () {\n      return Session.get(\"hideCompleted\");\n    },\n    incompleteCount: function () {\n      return Art.find({checked: {$ne: true}}).count();\n    },\n  });\n\n\n  Template.gallery.events({\n    \"submit .new-art\": function (event) {\n      // Prevent default browser form submit\n      event.preventDefault();\n\n      // Get value from form element\n      var text = event.target.text.value;\n\n      // Insert a art into the collection\n      Meteor.call(\"addArt\", text);\n\n      // Clear form\n      event.target.text.value = \"\";\n    },\n    \"change .hide-completed input\": function (event) {\n      Session.set(\"hideCompleted\", event.target.checked);\n    }\n  });\n\n  Template.artpiece.helpers({\n    screenshotLink: function() {\n      if (this.screenshotDataId) {\n        return Images.findOne(({_id: this.screenshotDataId}));\n      } else if (this.screenshotDataURL) {\n        return { url:this.screenshotDataURL };\n      } else {\n        return { url:\"/static/resources/images/missing-thumbnail.jpg\" };\n      }\n    },\n  });\n\n  Template.artitem.helpers({\n    isOwner: function () {\n      return this.owner === Meteor.userId();\n    }\n  });\n\n  Template.artitem.events({\n    \"click .toggle-checked\": function () {\n      // Set the checked property to the opposite of its current value\n      Meteor.call(\"setChecked\", this._id, ! this.checked);\n    },\n    \"click .delete\": function () {\n      Meteor.call(\"deleteTask\", this._id);\n    },\n    \"click .toggle-private\": function () {\n      Meteor.call(\"setPrivate\", this._id, ! this.private);\n    },\n  });\n\n  function SetArt(data) {\n    var settings;\n    if (data && data.settings) {\n      try {\n        settings = JSON.parse(data.settings);\n      } catch (e) {\n        console.log(\"could not parse settings\");\n      }\n    } else {\n      if (!data) {\n        console.log(\"data not set\");\n      } else {\n        console.log(\"data.settings not set for id:\", data._id);\n      }\n    }\n    if (!settings && window.location.pathname.substr(0, 5) !== \"/new/\") {\n      settings = window.vsart.missingSettings;\n    }\n    window.vsart.setSettings(settings);\n  }\n\n  Template.artpage.onRendered(function() {\n    SetArt(this.data);\n  });\n\n  Template.artpage.onDestroyed(function() {\n    window.vsart.stop();\n  });\n\n  Template.artpage.events({\n    \"click #save\": function() {\n      window.vsart.markAsSaving();\n      Meteor.call(\"addArt\", {\n        settings: window.vsart.getSettings(),\n        screenshot: window.vsart.takeScreenshot(),\n      });\n    },\n  });\n\n  Accounts.ui.config({\n    passwordSignupFields: \"USERNAME_ONLY\",\n  });\n\n}\n\n\n  Router.map(function() {\n    this.route('/', function() {\n      this.render('gallery');\n    });\n    this.route('/new/', function() {\n      this.render('artpage');\n    });\n    this.route('/art/:_id', {\n      template: 'artpage',\n      waitOn: function() {\n        return [Meteor.subscribe('art', this.params._id)];\n      },\n      data: function() {\n        return Art.findOne({_id: this.params._id});\n      },\n      action: function() {\n        //this.subscribe('art', this.params._id).wait();\n\n        if (this.ready()) {\n          this.render();\n        } else {\n          this.render('loading');\n        }\n      },\n      onAfterAction: function() {\n        if (!Meteor.isClient) {\n          return;\n        }\n        console.log(this);\n        //SEO.set({\n        //  title: \"foobar\",\n        //  meta: {\n        //    'description': \"foobar-desc\",\n        //  },\n        //  og: {\n        //    'title': this.params._id,\n        //    'description': \"foobar-desc\",\n        //  },\n        //});\n\n      },\n    });\n  });\n\nMeteor.methods({\n  addArt: function (data) {\n    // Make sure the user is logged in before inserting art\n//    if (! Meteor.userId()) {\n//      throw new Meteor.Error(\"not-authorized\");\n//    }\n    var owner = Meteor.userId();\n    var username = Meteor.userId() ? Meteor.user().username : \"-anon-\";\n    var settings = data.settings || {};\n    var screenshotDataURL = data.screenshot.dataURL || \"\";\n    Images.insert(screenshotDataURL, function(err, fileObj) {\n      Art.insert({\n        createdAt: new Date(),\n        owner: owner,\n        username: username,\n        settings: JSON.stringify(settings),\n        screenshotDataId: fileObj._id,\n      }, function(error, result) {\n         if (Meteor.isClient) {\n           var url = \"/art/\" + result;\n           window.history.replaceState({}, \"\", url);\n           window.vsart.markAsSaved();\n         }\n      });\n    });\n  },\n  deleteArt: function (artId) {\n    var art = Art.findOne(artId);\n    if (art.private && art.owner !== Meteor.userId()) {\n      // If the task is private, make sure only the owner can delete it\n      throw new Meteor.Error(\"not-authorized\");\n    }\n    Art.remove(artId);\n  },\n  setChecked: function (artId, setChecked) {\n    var art = Art.findOne(artId);\n    if (art.private && art.owner !== Meteor.userId()) {\n      // If the task is private, make sure only the owner can check it off\n      throw new Meteor.Error(\"not-authorized\");\n    }\n\n    Art.update(artId, { $set: { checked: setChecked} });\n  },\n  setPrivate: function (artId, setToPrivate) {\n    var art = Art.findOne(artId);\n\n    // Make sure only the task owner can make a task private\n    if (art.owner !== Meteor.userId()) {\n      throw new Meteor.Error(\"not-authorized\");\n    }\n\n    Art.update(artId, { $set: { private: setToPrivate } });\n  },\n  testSSR: function() {\n    if (Meteor.isServer) {\n      var html = SSR.render(\"artSSR\", {\n        art: Art.find({}).fetch(),\n      });\n      console.log(\"-----\\n\", html);\n    }\n  },\n});\n\n\nMeteor.startup(function () {\n if(Meteor.isClient){\n }\n if(Meteor.isClient){\n     // SEO.config({\n     //   title: 'vertexshaderart.com',\n     //   meta: {\n     //     'apple-mobile-web-app-capable': \"yes\",\n     //     'apple-mobile-web-app-status-bar-style': \"black\",\n     //     'HandheldFriendly': \"True\",\n     //     'MobileOptimized': \"320\",\n     //     'viewport': \"width=device-width, target-densitydpi=160dpi, initial-scale=1.0, minimal-ui\",\n     //     'description': 'vertexshaderart.com - realtime vertex shader art',\n     //   },\n     //   og: {\n     //     'image': 'http://vertexshaderart.com/static/resources/images/vertexshaderart.png',\n     //   },\n     // });\n }\n});\n\n\n"]}