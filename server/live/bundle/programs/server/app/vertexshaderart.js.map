{"version":3,"sources":["meteor://ðŸ’»app/vertexshaderart.js"],"names":[],"mappings":"yfile":"/vertexshaderart.js","sourcesContent":["Art = new Mongo.Collection(\"art\");\nArtRevision = new Mongo.Collection(\"artrevision\"); // note: username show username at time of revision\nArtLikes = new Mongo.Collection(\"artlikes\");\n\n//Artpages = new Meteor.Pagination(Art, {\n//  itemTemplate: \"artpiece\",\n//  templateName: \"gallery\",\n//  route: \"/gallery/\",\n//  router: \"iron-router\",\n//  routerTemplate: \"gallery\",\n//  routerLayout: \"Layout\",\n//});\n\nS_CURRENTLY_LOGGING_IN = \"currentlyLoggingIn\";\nS_PENDING_LIKE = \"pendingLike\";\nS_VIEW_STYLE = \"viewstyle\";\nS_ART_OWNER_ID = \"artOwnerId\";\nS_ART_NAME = \"artName\";\n\nG_PAGE_SIZE = 3; //15; //3;\nG_PAGE_RANGE = 2;\nG_NUM_PAGE_BUTTONS = G_PAGE_RANGE * 2 + 1;\nG_RESERVED_NAMES = {\n  \"-anon-\": true,\n};\n\nG_BAD_USERNAME_RE = /[:\\/\\\\?%#\\t\\n\\r]/\nfunction isBadUsername(username) {\n  return G_RESERVED_NAMES[username.toLowerCase()] ||\n         G_BAD_USERNAME_RE.test(username);\n}\n\nvar S_ZEROS = \"0000000000\";\nfunction padZeros(v, len) {\n  var s = v.toString();\n  return S_ZEROS.substr(0, len - s.length) + s;\n}\n\n//FS.debug = true;\nImages = new FS.Collection(\"images\", {\n  stores: [\n    new FS.Store.FileSystem(\"images\", {\n      path: IMAGE_PATH,\n      beforeWrite: function(fileObj) {\n        fileObj.name(\"thumbnail.png\");\n        return {\n          extension: 'png',\n          type: 'image/png',\n        };\n      },\n    }),\n  ],\n});\n\nif (Meteor.isServer) {\n  Images.allow({\n    'insert': function() {\n        // add custom authentication code here\n        return true;\n    },\n    'download': function() {\n         return true;\n    },\n  });\n\n  Meteor.publish(\"artForGrid\", function (username, sortField, skip, limit) {\n    var find = username ? {username: username} : {};\n    var sort = {};\n    sort[sortField] = -1;\n    return Art.find(find, {\n      fields: {settings: false},\n      sort: sort,\n      skip: skip,\n      limti: limit,\n    });\n  });\n\n  Meteor.publish(\"art\", function(id) {\n    return Art.find({_id: id});\n  });\n\n  Meteor.publish(\"artCount\", function() {\n    Counts.publish(this, 'artCount', Art.find({}));\n  });\n\n  Meteor.publish(\"artLikes\", function (artId, userId) {\n    return ArtLikes.find({artId: artId, userId: userId});\n  });\n\n  Meteor.publish(\"usernames\", function(username) {\n    return Meteor.users.find({username: username}, {fields: {username: 1}});\n  });\n\n  Meteor.publish(\"artrevision\", function(id) {\n    return ArtRevision.find({_id: id});\n  });\n\n  Meteor.publish(\"artrevisions\", function(artId, skip, limit) {\n    return ArtRevision.find({artId: artId}, {\n      fields: {settings: false},\n      skip: skip,\n      limit: limit,\n      sort: {createdAt: -1},\n    });\n  });\n\n\n  var templateRE = /<template\\s+name=\"(.*?)\">([\\s\\S]*?)<\\/template>/g;\n  var ssrTemplates = Assets.getText('ssr-templates.html');\n  do {\n    var m = templateRE.exec(ssrTemplates);\n    if (m) {\n      SSR.compileTemplate(m[1], m[2]);\n    }\n  } while (m);\n\n  var urlRE = /(.*?\\:)\\/\\/(.*)$/;\n  function parseUrl(url) {\n    var u = {};\n    var hashNdx = url.indexOf(\"#\");\n    if (hashNdx >= 0) {\n      u.hash = url.substr(hashNdx);\n      url = url.substr(0, hashNdx);\n    }\n    var searchNdx = url.indexOf(\"?\");\n    if (searchNdx >= 0) {\n      u.search = url.substr(searchNdx);\n      url = url.substr(0, searchNdx);\n    }\n    var m = urlRE.exec(url);\n    if (m) {\n      u.protocol = m[1];\n      url = m[2];\n    }\n    var slashNdx = url.indexOf(\"/\");\n    if (slashNdx >= 0) {\n      u.hostname = url.substr(0, slashNdx);\n      u.pathname = url.substr(slashNdx);\n    } else {\n      u.host = other;\n    }\n\n    return u;\n  }\n\n  //var artPathRE = /\\/art\\/(.*)/;\n  //WebApp.connectHandlers.use(\"/\", function(req, res, next) {\n  //   var url = parseUrl(req.url);\n  //   if (url.pathname) {\n  //     var m = artPathRE.exec(url.pathname);\n  //     if (m) {\n  //\n  //     }\n  //   }\n  //   next();\n  //});\n\n//  Inject.meta(\"foo\", \"bar\");\n}\n\nvar pwd = AccountsTemplates.removeField('password');\nAccountsTemplates.removeField('email');\nAccountsTemplates.addFields([\n  {\n      _id: \"username\",\n      type: \"text\",\n      displayName: \"username\",\n      required: true,\n      minLength: 3,\n  },\n  {\n      _id: 'email',\n      type: 'email',\n      required: true,\n      displayName: \"email\",\n      re: /.+@(.+){2,}\\.(.+){2,}/,\n      errStr: 'Invalid email',\n  },\n  {\n      _id: 'username_and_email',\n      type: 'text',\n      required: true,\n      displayName: \"Login\",\n  },\n  pwd\n]);\n\nif (Meteor.isClient) {\n  Meteor.subscribe(\"artCount\");\n  Session.set(S_VIEW_STYLE, \"popular\");\n  Pages = new Mongo.Collection(null);\n\n  Template.gallery.helpers({\n    hideCompleted: function () {\n      return Session.get(\"hideCompleted\");\n    },\n    incompleteCount: function () {\n      return Art.find({checked: {$ne: true}}).count();\n    },\n  });\n\n  Template.artgrid.helpers({\n    art: function () {\n      var route = Router.current();\n      var pageId = route.params._page || 1;\n      var page = pageId - 1;\n      var skip = page * G_PAGE_SIZE;\n      var find = {};\n      var sort;\n      var cd = Template.currentData();\n      if (cd && cd.user) {\n        var pd = Template.parentData();\n        if (pd && pd.username) {\n          find = {username: pd.username};\n        }\n      }\n      switch (Session.get(S_VIEW_STYLE)) {\n        case \"mostviewed\":\n          sort = { views: -1 };\n          break;\n        case \"newest\":\n          sort = {createdAt: -1};\n          break;\n        case \"popular\":\n        default:\n          sort = { likes: -1 };\n          break;\n      }\n\n      return Art.find(find, {\n        fields: {settings: false},\n        sort: sort,\n        skip: skip,\n        limit: G_PAGE_SIZE,\n      });\n      //if (Session.get(\"hideCompleted\")) {\n      //  // If hide completed is checked, filter tasks\n      //  return Art.find({checked: {$ne: true}}, {sort: {createdAt: -1}});\n      //} else {\n      //  // Otherwise, return all of the tasks\n      //  return Art.find({}, {sort: {createdAt: -1}});\n      //}\n    },\n  });\n\n  Template.artrevisions.helpers({\n    revisions: function() {\n      var route = Router.current();\n      var artId = route.params._id;\n      var skip = 0;\n      var limit = 10;\n      return ArtRevision.find({artId: artId}, {\n        skip: skip,\n        limit: limit,\n        sort: { createdAt: -1 },\n      });\n    },\n  });\n\n  Template.revision.helpers({\n    screenshotLink: function() {\n      if (this.screenshotURL) {\n        return { url: this.screenshotURL };\n      } else if (this.screenshotDataId) {\n        return { url: \"/cfs/files/images/\" + this.screenshotDataId };\n//        return Images.findOne(({_id: this.screenshotDataId}));\n      } else if (this.screenshotDataURL) {\n        return { url:this.screenshotDataURL };\n      } else {\n        return { url:\"/static/resources/images/missing-thumbnail.jpg\" };\n      }\n    },\n    createdAtFormatted: function() {\n      var d = this.createdAt;\n      return d.getFullYear() + \"/\" + padZeros(d.getMonth(), 2) + \"/\" + padZeros(d.getDate(), 2) + \" \" + padZeros(d.getHours(), 2) + \":\" + padZeros(d.getMinutes(), 2);\n    },\n  });\n\n  Template.artpiece.helpers({\n    screenshotLink: function() {\n      if (this.screenshotURL) {\n        return { url: this.screenshotURL };\n      } else if (this.screenshotDataId) {\n        return { url: \"/cfs/files/images/\" + this.screenshotDataId };\n//        return Images.findOne(({_id: this.screenshotDataId}));\n      } else if (this.screenshotDataURL) {\n        return { url:this.screenshotDataURL };\n      } else {\n        return { url:\"/static/resources/images/missing-thumbnail.jpg\" };\n      }\n    },\n  });\n\n  //Template.artitem.helpers({\n  //  isOwner: function () {\n  //    return this.owner === Meteor.userId();\n  //  }\n  //});\n  //\n  //Template.artitem.events({\n  //  \"click .toggle-checked\": function () {\n  //    // Set the checked property to the opposite of its current value\n  //    Meteor.call(\"setChecked\", this._id, ! this.checked);\n  //  },\n  //  \"click .delete\": function () {\n  //    Meteor.call(\"deleteTask\", this._id);\n  //  },\n  //  \"click .toggle-private\": function () {\n  //    Meteor.call(\"setPrivate\", this._id, ! this.private);\n  //  },\n  //});\n\n  Template.vslogin.helpers({\n    currentlyLoggingIn: function() {\n      var currentlyLoggingIn = Session.get(S_CURRENTLY_LOGGING_IN) && !Meteor.user();\n      return currentlyLoggingIn;\n    }\n  });\n\n  Template.vslogin.events({\n    \"click #vsloginback\": function() {\n      Session.set(S_CURRENTLY_LOGGING_IN, false);\n      Session.set(S_PENDING_LIKE, false);\n    },\n    \"click #vslogin\": function(e) {\n      e.stopPropagation();\n    },\n  });\n\n  Template.userinfolike.helpers({\n    likedByUser: function() {\n      var route = Router.current();\n      if (ArtLikes.findOne({artId: route.params._id, userId: Meteor.userId()})) {\n        return true;\n      } else {\n        return false;\n      }\n    },\n  });\n  Template.userinfolike.events({\n    \"click #like.nouser\": function() {\n      Session.set(S_CURRENTLY_LOGGING_IN, true);\n      Session.set(S_PENDING_LIKE, true);\n    },\n    \"click #like.currentuser\": function() {\n      var route = Router.current();\n      Meteor.call(\"likeArt\", route.params._id);\n    },\n  });\n  Template.userinfosignin.events({\n    \"click #user.nouser\": function() {\n      Session.set(S_CURRENTLY_LOGGING_IN, true);\n    },\n    \"click #user.currentuser\": function() {\n      window.location.href = \"/user/\" + Meteor.user().username;\n    },\n  });\n\n  Template.userprofile.helpers({\n    editUsername: function() {\n      return Session.get(\"editUsername\");\n    },\n    userExists: function() {\n      var route = Router.current();\n      var username = route.params._username;\n      if (Meteor.users.findOne({username: username})) {\n        return true;\n      }\n      return false;\n    },\n    userIsCurrentUser: function() {\n      var route = Router.current();\n      return Meteor.userId() &&\n             route.params._username === Meteor.user().username;\n    },\n  });\n\n  Template.userprofile.events({\n    \"blur .usernameedit\": function() {\n      Session.set(\"editUsername\", false);\n      $(\".infoContainer .username\").show();\n      $(\".infoContainer .usernameedit\").hide();\n    },\n    \"click .username\": function(e) {\n      var route = Router.current();\n      if (Meteor.userId() &&\n          Meteor.user().username === route.params._username) {\n        Session.set(\"editUsername\", true);\n        $(\".infoContainer .username\").hide();\n        $(\".infoContainer .usernameedit\").show().focus();\n      }\n    },\n    \"change .usernameedit\": function(e) {\n      if (Meteor.userId()) {\n        var username = e.target.value.trim();\n        Meteor.call(\"changeUsername\", username, function(error) {\n          if (!error) {\n            Session.set(\"editUsername\", false);\n            Router.go(\"/user/\" + username);\n            return;\n          }\n        });\n      }\n    },\n    \"click .logout\": function() {\n       if (Meteor.userId()) {\n         Meteor.logout();\n       }\n    },\n  });\n\n  Template.sorting.events({\n    \"click .sorting .popular\": function() {\n      Session.set(S_VIEW_STYLE, \"popular\");\n    },\n    \"click .sorting .newest\": function() {\n      Session.set(S_VIEW_STYLE, \"newest\");\n    },\n    \"click .sorting .mostviewed\": function() {\n      Session.set(S_VIEW_STYLE, \"mostviewed\");\n    },\n  });\n\n  Template.sorting.helpers({\n    selected: function(sortType) {\n      return Session.get(S_VIEW_STYLE) === sortType ? \"selected\" : \"\";\n    },\n    pages: function() {\n       var count = Counts.get(\"artCount\");\n       var cd = Template.currentData();\n       var pd = Template.parentData();\n       var pageId = pd.page;\n       var path = cd ? cd.path : \"foo\";\n       if (cd && cd.user) {\n         if (pd && pd.username) {\n           var username = pd.username;\n           // HACK!!!\n           path = \"user/\" + username;\n           count = Art.find({username: username}).count();\n           pageId = parseInt(pd.page || 1);\n         }\n       }\n       var page = pageId - 1;\n       var numPages = (count + G_PAGE_SIZE - 1) / G_PAGE_SIZE | 0;\n       var lastPage = numPages - 1;\n       Pages.remove({});\n       if (numPages > 1) {\n         var needPrevNext = numPages > G_NUM_PAGE_BUTTONS\n         if (needPrevNext) {\n           var prev = Math.max(page, 1);\n           Pages.insert({path: path, pagenum: \"<<\", pageid: prev, samepageclass: pageId === prev ? \"selected\" : \"\"});\n         }\n\n         var min = page - G_PAGE_RANGE;\n         var max = page + G_PAGE_RANGE;\n         if (min < 0) {\n           max = max - min;\n           min = 0;\n         }\n         if (max > lastPage) {\n           min = Math.max(0, min - (max - lastPage));\n           max = lastPage;\n         }\n         for (var ii = min; ii <= max; ++ii) {\n           Pages.insert({path: path, pagenum: ii + 1, pageid: ii + 1, samepageclass: ii === page ? \"selected\" : \"\"});\n         }\n\n         if (needPrevNext) {\n           var next = Math.min(lastPage, page + 1);\n           Pages.insert({path: path, pagenum: \">>\", pageid: next + 1, samepageclass: page === next ? \"selected\" : \"\"});\n         }\n       }\n       return Pages.find({});\n    },\n  });\n\n  function SetArt(data) {\n    var settings;\n    Session.set(S_ART_OWNER_ID, undefined);\n    Session.set(S_ART_NAME, \"unnamed\");\n    if (data && data.settings) {\n      try {\n        settings = JSON.parse(data.settings);\n        Session.set(S_ART_OWNER_ID, data.owner);\n        Session.set(S_ART_NAME, data.name);\n      } catch (e) {\n        console.log(\"could not parse settings\");\n      }\n    } else {\n      if (!data) {\n        console.log(\"data not set\");\n      } else {\n        console.log(\"data.settings not set for id:\", data._id);\n      }\n    }\n    if (!settings && window.location.pathname.substr(0, 5) !== \"/new/\") {\n      settings = window.vsart.missingSettings;\n    }\n    window.vsart.setSettings(settings);\n  }\n\n  Template.artpage.onRendered(function() {\n    SetArt(this.data);\n  });\n\n  Template.artpage.onDestroyed(function() {\n    window.vsart.stop();\n  });\n\n  Template.artpage.events({\n    \"click #save\": function() {\n      Session.set(\"saving\", true);\n      window.vsSaveData = {\n        settings: window.vsart.getSettings(),\n        screenshot: window.vsart.takeScreenshot(),\n      };\n    },\n    \"click #new\": function() {\n      window.location.href = \"/new/\";\n    },\n  });\n\n  Template.save.helpers({\n    saving: function() {\n      return Session.get(\"saving\");\n    },\n    artname: function() {\n      return Session.get(S_ART_NAME);\n    },\n    isCurrentUsersExistingArt: function() {\n      var route = Router.current();\n      var artId = route.params ? route.params._id : undefined;\n      return artId && Meteor.userId() && Meteor.userId() === Session.get(S_ART_OWNER_ID);\n    },\n    screenshot: function() {\n      if (!window.vsSaveData) {\n        console.log(\"no save data\");\n        Session.set(\"saving\", false);\n        return \"\";\n      }\n      return window.vsSaveData.screenshot.dataURL;\n    },\n  });\n\n  Template.save.events({\n    \"click #savedialogback\": function() {\n      Session.set(\"saving\", false);\n    },\n    \"click #savedialog\": function(e) {\n      e.stopPropagation();\n    },\n    \"click #saveit, click #savenew\": function() {\n      var route = Router.current();\n      var origId;\n      if (route && route.params) {\n        origId = route.params._id;\n      }\n      window.vsart.markAsSaving();\n      Session.set(\"saving\", false);\n      Meteor.call(\"addArt\", $(\"#savedialog #name\").val(), origId, window.vsSaveData, function(err, result) {\n        window.vsart.markAsSaved();\n        if (err) {\n          console.error(err);\n          return;\n        }\n        var url = \"/art/\" + result;\n        Router.go(url);\n      });\n    },\n    \"click #updateit\": function() {\n      var route = Router.current();\n      var origId;\n      if (route && route.params) {\n        origId = route.params._id;\n      }\n      window.vsart.markAsSaving();\n      Session.set(\"saving\", false);\n      Meteor.call(\"updateArt\", $(\"#savedialog #name\").val(), origId, window.vsSaveData, function(err, result) {\n        window.vsart.markAsSaved();\n      });\n    },\n    \"click #cancel\": function() {\n      Session.set(\"saving\", false);\n    },\n    \"click .signin\": function() {\n      Session.set(S_CURRENTLY_LOGGING_IN, true);\n    },\n  });\n\n  Accounts.ui.config({\n    passwordSignupFields: \"USERNAME_ONLY\",\n  });\n\n}\n\nvar mySubmitFunc = function(error, state){\n  if (error) {\n    console.log(\"login error\");\n  } else if (state === \"signIn\") {\n      // Successfully logged in\n      // ...\n    console.log(\"sign in\");\n  } else  if (state === \"signUp\") {\n      // Successfully registered\n      // ...\n    console.log(\"sign up\");\n  }\n};\n\nAccountsTemplates.configure({\n    onSubmitHook: mySubmitFunc\n});\n\nfunction subscribeForGrid(pageId, username) {\n  var page = pageId - 1;\n  var skip = page * G_PAGE_SIZE;\n  var limit = G_PAGE_SIZE;\n  return [\n    Meteor.subscribe(\"artForGrid\", username, \"views\", skip, limit),\n    Meteor.subscribe(\"artForGrid\", username, \"createdAt\", skip, limit),\n    Meteor.subscribe(\"artForGrid\", username, \"popular\", skip, limit),\n  ];\n}\n\nRouter.map(function() {\n  this.route('/', {\n    template: 'gallery',\n    data: {\n      page: 1,\n    },\n    subscriptions: function() {\n      return subscribeForGrid(1);\n    },\n    cache: 5,\n    expire: 3,\n  });\n  this.route('/gallery/:_page', {\n    template: 'gallery',\n    data: function() {\n      return {\n        page: parseInt(this.params._page),\n      };\n    },\n    subscriptions: function() {\n      return subscribeForGrid(parseInt(this.params._page));\n    },\n    cache: 5,\n    expire: 3,\n  });\n  this.route('/new/', function() {\n    this.render('artpage');\n  });\n  this.route('/user/:_username', {\n    template: 'userprofile',\n    data: function() {\n      return {\n        page: 1,\n        username: this.params._username,\n      };\n    },\n    subscriptions: function() {\n      var subs = subscribeForGrid(1, this.params._username);\n      subs.push(Meteor.subscribe('usernames', this.params._username));\n      return subs;\n    },\n    cache: 5,\n    expire: 5,\n  });\n  this.route('/user/:_username/:_page', {\n    template: 'userprofile',\n    data: function() {\n      return {\n        page: parseInt(this.params._page),\n        username: this.params._username,\n      };\n    },\n    subscriptions: function() {\n      var subs = subscribeForGrid(parseInt(this.params._page), this.params._username);\n      subs.push(Meteor.subscribe('usernames', this.params._username));\n      return subs;\n    },\n    cache: 5,\n    expire: 5,\n  });\n  this.route('/art/:_id', {\n    template: 'artpage',\n    subscriptions: function() {\n      var subs = [\n        Meteor.subscribe('art', this.params._id),\n      ];\n      if (Meteor.userId()) {\n        subs.push(Meteor.subscribe('artLikes', this.params._id, Meteor.userId()));\n      }\n      return subs;\n    },\n    cache: 5,\n    expire: 5,\n    data: function() {\n      return Art.findOne({_id: this.params._id});\n    },\n    action: function() {\n      if (this.ready()) {\n        Session.set(S_CURRENTLY_LOGGING_IN, false);\n        this.render();\n      } else {\n        this.render('loading');\n      }\n    },\n    onAfterAction: function() {\n      if (!Meteor.isClient) {\n        return;\n      }\n\n      // hard to decide what's the best way to do this\n      // this just makes it not get into an infinite loop.\n      // Do we care that if you just refresh the page it's a new view?\n      // Youtube doesn't care so should I?\n      var artId = this.params._id;\n      var lastArtId = Session.get(\"view_art_id\");\n      if (artId !== lastArtId) {\n        Session.set(\"view_art_id\", artId);\n        Meteor.call(\"incArtViews\", artId);\n      }\n      //SEO.set({\n      //  title: \"foobar\",\n      //  meta: {\n      //    'description': \"foobar-desc\",\n      //  },\n      //  og: {\n      //    'title': this.params._id,\n      //    'description': \"foobar-desc\",\n      //  },\n      //});\n\n    },\n  });\n  this.route('/art/:_id/revision/:_revisionId', {\n    template: 'artpage',\n    subscriptions: function() {\n      var subs = [\n        Meteor.subscribe('artrevision', this.params._revisionId),\n        Meteor.subscribe('art', this.params._id),\n      ];\n      if (Meteor.userId()) {\n        subs.push(Meteor.subscribe('artLikes', this.params._id, Meteor.userId()));\n      }\n      return subs;\n    },\n    cache: 5,\n    expire: 5,\n    data: function() {\n      return ArtRevision.findOne({_id: this.params._revisionId});\n    },\n    action: function() {\n      if (this.ready()) {\n        Session.set(S_CURRENTLY_LOGGING_IN, false);\n        this.render();\n      } else {\n        this.render('loading');\n      }\n    },\n    onAfterAction: function() {\n      if (!Meteor.isClient) {\n        return;\n      }\n\n      // hard to decide what's the best way to do this\n      // this just makes it not get into an infinite loop.\n      // Do we care that if you just refresh the page it's a new view?\n      // Youtube doesn't care so should I?\n      //\n      // -- let's not track views for revisions\n      //\n      // var artId = this.params._id;\n      // var lastArtId = Session.get(\"view_art_id\");\n      // if (artId !== lastArtId) {\n      //   Session.set(\"view_art_id\", artId);\n      //   Meteor.call(\"incArtViews\", artId);\n      // }\n      //SEO.set({\n      //  title: \"foobar\",\n      //  meta: {\n      //    'description': \"foobar-desc\",\n      //  },\n      //  og: {\n      //    'title': this.params._id,\n      //    'description': \"foobar-desc\",\n      //  },\n      //});\n\n    },\n  });\n  this.route('/art/:_id/revisions/', {\n    template: 'artrevisions',\n    subscriptions: function() {\n      var subs = [\n        Meteor.subscribe('art', this.params._id),\n        Meteor.subscribe('artrevisions', this.params._id, 0, G_PAGE_SIZE),\n      ];\n      return subs;\n    },\n    cache: 5,\n    expire: 5,\n  });\n});\n\nfunction addArt(name, origId, data, callback) {\n  // Make sure the user is logged in before inserting art\n//    if (! Meteor.userId()) {\n//      throw new Meteor.Error(\"not-authorized\");\n//    }\n  name = name || \"unnamed\";\n  var owner = Meteor.userId();\n  var username = Meteor.userId() ? Meteor.user().username : \"-anon-\";\n  var settings = data.settings || {};\n  var screenshotDataURL = data.screenshot.dataURL || \"\";\n  Images.insert(screenshotDataURL, function(err, fileObj) {\n    if (err) {\n      callback(err);\n      return;\n    }\n    var artId = Art.insert({\n      owner: owner,\n      createdAt: new Date(),\n      origId: origId,\n      name: name,\n      username: username,\n      settings: JSON.stringify(settings),\n      screenshotDataId: fileObj._id,\n      views: 0,\n      likes: 0,\n    });\n    var revisionId = ArtRevision.insert({\n      createdAt: new Date(),\n      owner: owner,\n      origId: origId,\n      artId: artId,\n      name: name,\n      username: username,\n      settings: JSON.stringify(settings),\n      screenshotDataId: fileObj._id,\n    }, function(err, result) {\n       if (err) {\n         callback(err);\n         return;\n       }\n       Art.update({_id: artId},\n         {$set: {\n           revisionId: revisionId,\n         },\n       }, function(err) {\n         callback(err, artId);\n       });\n    });\n  });\n}\n\nfunction updateArt(name, origId, data, callback) {\n  var owner = Meteor.userId();\n  if (!owner) {\n    throw new Meteor.Error(\"not-loggedin\", \"use must be logged in to update\");\n  }\n  var arts = Art.find({_id: origId}).fetch();\n  if (!arts || arts.length != 1) {\n    throw new Meteor.Error(\"not-exists\", \"can not update non-existant art\");\n  }\n  var art = arts[0];\n  if (art.owner !== owner) {\n    throw new Meteor.Error(\"not-owner\", \"must be onwer to update art\");\n  }\n\n  var username = Meteor.user().username;\n  var settings = data.settings || {};\n  var screenshotDataURL = data.screenshot.dataURL || \"\";\n\n  Images.insert(screenshotDataURL, function(err, fileObj) {\n    if (err) {\n      callback(err);\n      return;\n    }\n    name = name || \"unnamed\";\n    var revisionId = ArtRevision.insert({\n      createdAt: new Date(),\n      owner: owner,\n      origId: origId,\n      artId: art._id,\n      prevRevisionId: art.revisionId,\n      name: name,\n      username: username,\n      settings: JSON.stringify(settings),\n      screenshotDataId: fileObj._id,\n    }, function(err, result) {\n       if (err) {\n         callback(err);\n         return;\n       }\n       Art.update({_id: origId},\n         {$set: {\n           revisionId: revisionId,\n           name: name,\n           settings: JSON.stringify(settings),\n           screenshotDataId: fileObj._id,\n         },\n       }, function() {\n         callback(null);\n       });\n    });\n  });\n}\n\n\nMeteor.methods({\n  addArt: Meteor.wrapAsync(addArt),\n  updateArt: Meteor.wrapAsync(updateArt),\n  likeArt: function(artId) {\n     var userId = Meteor.userId();\n     if (!userId) {\n       throw new Meteor.Error(\"not-loggedin\", \"can not like something if not logged in\");\n     }\n     var like = ArtLikes.findOne({artId: artId, userId: userId});\n     if (like) {\n       ArtLikes.remove(like._id);\n     } else {\n       ArtLikes.insert({artId: artId, userId: userId});\n     }\n     Art.update({_id: artId}, {$inc: {likes: like ? -1 : 1}});\n  },\n  changeUsername: function(username) {\n    username = username.trim();\n    if (!Meteor.userId()) {\n      throw new Meteor.Error(\"not loggedin\", \"please login to change your username\");\n    }\n    if (!username) {\n      throw new Meteor.Error(\"bad data\", \"username is empty or mostly empty\");\n    }\n    if (isBadUsername(username)) {\n      throw new Meteor.Error(\"bad data\", \"not a valid name (no #%?/\\\\: allowed\");\n    }\n    if (Meteor.user().username === username) {\n      return;\n    }\n    if (!Meteor.isServer) {\n      return;\n    }\n    try {\n      Accounts.setUsername(Meteor.userId(), username);\n    } catch(e) {\n      console.log(\"could not set username\");\n      throw e;\n    }\n    Art.update({owner: Meteor.userId()}, {$set: {username: username}}, {multi: true});\n  },\n  //deleteArt: function (artId) {\n  //  var art = Art.findOne(artId);\n  //  if (art.private && art.owner !== Meteor.userId()) {\n  //    // If the task is private, make sure only the owner can delete it\n  //    throw new Meteor.Error(\"not-authorized\");\n  //  }\n  //  Art.remove(artId);\n  //},\n  //setChecked: function (artId, setChecked) {\n  //  var art = Art.findOne(artId);\n  //  if (art.private && art.owner !== Meteor.userId()) {\n  //    // If the task is private, make sure only the owner can check it off\n  //    throw new Meteor.Error(\"not-authorized\");\n  //  }\n  //\n  //  Art.update(artId, { $set: { checked: setChecked} });\n  //},\n  //setPrivate: function (artId, setToPrivate) {\n  //  var art = Art.findOne(artId);\n  //\n  //  // Make sure only the task owner can make a task private\n  //  if (art.owner !== Meteor.userId()) {\n  //    throw new Meteor.Error(\"not-authorized\");\n  //  }\n  //\n  //  Art.update(artId, { $set: { private: setToPrivate } });\n  //},\n  //testSSR: function() {\n  //  if (Meteor.isServer) {\n  //    var html = SSR.render(\"artSSR\", {\n  //      art: Art.find({}).fetch(),\n  //    });\n  //    console.log(\"-----\\n\", html);\n  //  }\n  //},\n  incArtViews: function(artId) {\n    Art.update({_id: artId}, {$inc: {views: 1}});\n  },\n});\n\n\nMeteor.startup(function () {\n if(Meteor.isClient){\n }\n if(Meteor.isClient){\n     // SEO.config({\n     //   title: 'vertexshaderart.com',\n     //   meta: {\n     //     'apple-mobile-web-app-capable': \"yes\",\n     //     'apple-mobile-web-app-status-bar-style': \"black\",\n     //     'HandheldFriendly': \"True\",\n     //     'MobileOptimized': \"320\",\n     //     'viewport': \"width=device-width, target-densitydpi=160dpi, initial-scale=1.0, minimal-ui\",\n     //     'description': 'vertexshaderart.com - realtime vertex shader art',\n     //   },\n     //   og: {\n     //     'image': 'http://vertexshaderart.com/static/resources/images/vertexshaderart.png',\n     //   },\n     // });\n }\n});\n\n\n"]}